// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: fizzbuzz.proto

package fizzbuzz

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message containing x (number)
type FizzBuzzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
}

func (x *FizzBuzzRequest) Reset() {
	*x = FizzBuzzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizzbuzz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FizzBuzzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FizzBuzzRequest) ProtoMessage() {}

func (x *FizzBuzzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fizzbuzz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FizzBuzzRequest.ProtoReflect.Descriptor instead.
func (*FizzBuzzRequest) Descriptor() ([]byte, []int) {
	return file_fizzbuzz_proto_rawDescGZIP(), []int{0}
}

func (x *FizzBuzzRequest) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

// The response message containing result (string)
type FizzBuzzReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FizzBuzzReply) Reset() {
	*x = FizzBuzzReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizzbuzz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FizzBuzzReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FizzBuzzReply) ProtoMessage() {}

func (x *FizzBuzzReply) ProtoReflect() protoreflect.Message {
	mi := &file_fizzbuzz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FizzBuzzReply.ProtoReflect.Descriptor instead.
func (*FizzBuzzReply) Descriptor() ([]byte, []int) {
	return file_fizzbuzz_proto_rawDescGZIP(), []int{1}
}

func (x *FizzBuzzReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_fizzbuzz_proto protoreflect.FileDescriptor

var file_fizzbuzz_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x22, 0x1f, 0x0a, 0x0f, 0x46, 0x69,
	0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x22, 0x27, 0x0a, 0x0d, 0x46,
	0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0xb9, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a,
	0x7a, 0x12, 0x46, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x7a, 0x7a, 0x42,
	0x75, 0x7a, 0x7a, 0x12, 0x19, 0x2e, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x2e, 0x46,
	0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x2e, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75,
	0x7a, 0x7a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x6f, 0x6f,
	0x70, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x12, 0x19, 0x2e, 0x66, 0x69, 0x7a, 0x7a,
	0x62, 0x75, 0x7a, 0x7a, 0x2e, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x2e,
	0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x52, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x2e,
	0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x2e, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66, 0x69, 0x7a, 0x7a, 0x62,
	0x75, 0x7a, 0x7a, 0x2e, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69,
	0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x12, 0x19, 0x2e, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a,
	0x7a, 0x2e, 0x46, 0x69, 0x7a, 0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x2e, 0x46, 0x69, 0x7a,
	0x7a, 0x42, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x66, 0x69, 0x7a, 0x7a, 0x62, 0x75, 0x7a, 0x7a, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fizzbuzz_proto_rawDescOnce sync.Once
	file_fizzbuzz_proto_rawDescData = file_fizzbuzz_proto_rawDesc
)

func file_fizzbuzz_proto_rawDescGZIP() []byte {
	file_fizzbuzz_proto_rawDescOnce.Do(func() {
		file_fizzbuzz_proto_rawDescData = protoimpl.X.CompressGZIP(file_fizzbuzz_proto_rawDescData)
	})
	return file_fizzbuzz_proto_rawDescData
}

var file_fizzbuzz_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_fizzbuzz_proto_goTypes = []interface{}{
	(*FizzBuzzRequest)(nil), // 0: fizzbuzz.FizzBuzzRequest
	(*FizzBuzzReply)(nil),   // 1: fizzbuzz.FizzBuzzReply
}
var file_fizzbuzz_proto_depIdxs = []int32{
	0, // 0: fizzbuzz.FizzBuzz.SingleFizzBuzz:input_type -> fizzbuzz.FizzBuzzRequest
	0, // 1: fizzbuzz.FizzBuzz.LoopFizzBuzz:input_type -> fizzbuzz.FizzBuzzRequest
	0, // 2: fizzbuzz.FizzBuzz.MultiRequestSingleResult:input_type -> fizzbuzz.FizzBuzzRequest
	0, // 3: fizzbuzz.FizzBuzz.MultiFizzBuzz:input_type -> fizzbuzz.FizzBuzzRequest
	1, // 4: fizzbuzz.FizzBuzz.SingleFizzBuzz:output_type -> fizzbuzz.FizzBuzzReply
	1, // 5: fizzbuzz.FizzBuzz.LoopFizzBuzz:output_type -> fizzbuzz.FizzBuzzReply
	1, // 6: fizzbuzz.FizzBuzz.MultiRequestSingleResult:output_type -> fizzbuzz.FizzBuzzReply
	1, // 7: fizzbuzz.FizzBuzz.MultiFizzBuzz:output_type -> fizzbuzz.FizzBuzzReply
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fizzbuzz_proto_init() }
func file_fizzbuzz_proto_init() {
	if File_fizzbuzz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fizzbuzz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FizzBuzzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizzbuzz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FizzBuzzReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fizzbuzz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fizzbuzz_proto_goTypes,
		DependencyIndexes: file_fizzbuzz_proto_depIdxs,
		MessageInfos:      file_fizzbuzz_proto_msgTypes,
	}.Build()
	File_fizzbuzz_proto = out.File
	file_fizzbuzz_proto_rawDesc = nil
	file_fizzbuzz_proto_goTypes = nil
	file_fizzbuzz_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FizzBuzzClient is the client API for FizzBuzz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FizzBuzzClient interface {
	// Single FizzBuzz
	SingleFizzBuzz(ctx context.Context, in *FizzBuzzRequest, opts ...grpc.CallOption) (*FizzBuzzReply, error)
	// Loop FizzBuzz (1 to Request.x)
	LoopFizzBuzz(ctx context.Context, in *FizzBuzzRequest, opts ...grpc.CallOption) (FizzBuzz_LoopFizzBuzzClient, error)
	// Multiple FizzBuzz
	MultiRequestSingleResult(ctx context.Context, opts ...grpc.CallOption) (FizzBuzz_MultiRequestSingleResultClient, error)
	// Multiple FizzBuzz
	MultiFizzBuzz(ctx context.Context, opts ...grpc.CallOption) (FizzBuzz_MultiFizzBuzzClient, error)
}

type fizzBuzzClient struct {
	cc grpc.ClientConnInterface
}

func NewFizzBuzzClient(cc grpc.ClientConnInterface) FizzBuzzClient {
	return &fizzBuzzClient{cc}
}

func (c *fizzBuzzClient) SingleFizzBuzz(ctx context.Context, in *FizzBuzzRequest, opts ...grpc.CallOption) (*FizzBuzzReply, error) {
	out := new(FizzBuzzReply)
	err := c.cc.Invoke(ctx, "/fizzbuzz.FizzBuzz/SingleFizzBuzz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fizzBuzzClient) LoopFizzBuzz(ctx context.Context, in *FizzBuzzRequest, opts ...grpc.CallOption) (FizzBuzz_LoopFizzBuzzClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FizzBuzz_serviceDesc.Streams[0], "/fizzbuzz.FizzBuzz/LoopFizzBuzz", opts...)
	if err != nil {
		return nil, err
	}
	x := &fizzBuzzLoopFizzBuzzClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FizzBuzz_LoopFizzBuzzClient interface {
	Recv() (*FizzBuzzReply, error)
	grpc.ClientStream
}

type fizzBuzzLoopFizzBuzzClient struct {
	grpc.ClientStream
}

func (x *fizzBuzzLoopFizzBuzzClient) Recv() (*FizzBuzzReply, error) {
	m := new(FizzBuzzReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fizzBuzzClient) MultiRequestSingleResult(ctx context.Context, opts ...grpc.CallOption) (FizzBuzz_MultiRequestSingleResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FizzBuzz_serviceDesc.Streams[1], "/fizzbuzz.FizzBuzz/MultiRequestSingleResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &fizzBuzzMultiRequestSingleResultClient{stream}
	return x, nil
}

type FizzBuzz_MultiRequestSingleResultClient interface {
	Send(*FizzBuzzRequest) error
	CloseAndRecv() (*FizzBuzzReply, error)
	grpc.ClientStream
}

type fizzBuzzMultiRequestSingleResultClient struct {
	grpc.ClientStream
}

func (x *fizzBuzzMultiRequestSingleResultClient) Send(m *FizzBuzzRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fizzBuzzMultiRequestSingleResultClient) CloseAndRecv() (*FizzBuzzReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FizzBuzzReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fizzBuzzClient) MultiFizzBuzz(ctx context.Context, opts ...grpc.CallOption) (FizzBuzz_MultiFizzBuzzClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FizzBuzz_serviceDesc.Streams[2], "/fizzbuzz.FizzBuzz/MultiFizzBuzz", opts...)
	if err != nil {
		return nil, err
	}
	x := &fizzBuzzMultiFizzBuzzClient{stream}
	return x, nil
}

type FizzBuzz_MultiFizzBuzzClient interface {
	Send(*FizzBuzzRequest) error
	Recv() (*FizzBuzzReply, error)
	grpc.ClientStream
}

type fizzBuzzMultiFizzBuzzClient struct {
	grpc.ClientStream
}

func (x *fizzBuzzMultiFizzBuzzClient) Send(m *FizzBuzzRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fizzBuzzMultiFizzBuzzClient) Recv() (*FizzBuzzReply, error) {
	m := new(FizzBuzzReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FizzBuzzServer is the server API for FizzBuzz service.
type FizzBuzzServer interface {
	// Single FizzBuzz
	SingleFizzBuzz(context.Context, *FizzBuzzRequest) (*FizzBuzzReply, error)
	// Loop FizzBuzz (1 to Request.x)
	LoopFizzBuzz(*FizzBuzzRequest, FizzBuzz_LoopFizzBuzzServer) error
	// Multiple FizzBuzz
	MultiRequestSingleResult(FizzBuzz_MultiRequestSingleResultServer) error
	// Multiple FizzBuzz
	MultiFizzBuzz(FizzBuzz_MultiFizzBuzzServer) error
}

// UnimplementedFizzBuzzServer can be embedded to have forward compatible implementations.
type UnimplementedFizzBuzzServer struct {
}

func (*UnimplementedFizzBuzzServer) SingleFizzBuzz(context.Context, *FizzBuzzRequest) (*FizzBuzzReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleFizzBuzz not implemented")
}
func (*UnimplementedFizzBuzzServer) LoopFizzBuzz(*FizzBuzzRequest, FizzBuzz_LoopFizzBuzzServer) error {
	return status.Errorf(codes.Unimplemented, "method LoopFizzBuzz not implemented")
}
func (*UnimplementedFizzBuzzServer) MultiRequestSingleResult(FizzBuzz_MultiRequestSingleResultServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiRequestSingleResult not implemented")
}
func (*UnimplementedFizzBuzzServer) MultiFizzBuzz(FizzBuzz_MultiFizzBuzzServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiFizzBuzz not implemented")
}

func RegisterFizzBuzzServer(s *grpc.Server, srv FizzBuzzServer) {
	s.RegisterService(&_FizzBuzz_serviceDesc, srv)
}

func _FizzBuzz_SingleFizzBuzz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FizzBuzzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FizzBuzzServer).SingleFizzBuzz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fizzbuzz.FizzBuzz/SingleFizzBuzz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FizzBuzzServer).SingleFizzBuzz(ctx, req.(*FizzBuzzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FizzBuzz_LoopFizzBuzz_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FizzBuzzRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FizzBuzzServer).LoopFizzBuzz(m, &fizzBuzzLoopFizzBuzzServer{stream})
}

type FizzBuzz_LoopFizzBuzzServer interface {
	Send(*FizzBuzzReply) error
	grpc.ServerStream
}

type fizzBuzzLoopFizzBuzzServer struct {
	grpc.ServerStream
}

func (x *fizzBuzzLoopFizzBuzzServer) Send(m *FizzBuzzReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FizzBuzz_MultiRequestSingleResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FizzBuzzServer).MultiRequestSingleResult(&fizzBuzzMultiRequestSingleResultServer{stream})
}

type FizzBuzz_MultiRequestSingleResultServer interface {
	SendAndClose(*FizzBuzzReply) error
	Recv() (*FizzBuzzRequest, error)
	grpc.ServerStream
}

type fizzBuzzMultiRequestSingleResultServer struct {
	grpc.ServerStream
}

func (x *fizzBuzzMultiRequestSingleResultServer) SendAndClose(m *FizzBuzzReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fizzBuzzMultiRequestSingleResultServer) Recv() (*FizzBuzzRequest, error) {
	m := new(FizzBuzzRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FizzBuzz_MultiFizzBuzz_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FizzBuzzServer).MultiFizzBuzz(&fizzBuzzMultiFizzBuzzServer{stream})
}

type FizzBuzz_MultiFizzBuzzServer interface {
	Send(*FizzBuzzReply) error
	Recv() (*FizzBuzzRequest, error)
	grpc.ServerStream
}

type fizzBuzzMultiFizzBuzzServer struct {
	grpc.ServerStream
}

func (x *fizzBuzzMultiFizzBuzzServer) Send(m *FizzBuzzReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fizzBuzzMultiFizzBuzzServer) Recv() (*FizzBuzzRequest, error) {
	m := new(FizzBuzzRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FizzBuzz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fizzbuzz.FizzBuzz",
	HandlerType: (*FizzBuzzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleFizzBuzz",
			Handler:    _FizzBuzz_SingleFizzBuzz_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoopFizzBuzz",
			Handler:       _FizzBuzz_LoopFizzBuzz_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MultiRequestSingleResult",
			Handler:       _FizzBuzz_MultiRequestSingleResult_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiFizzBuzz",
			Handler:       _FizzBuzz_MultiFizzBuzz_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fizzbuzz.proto",
}
